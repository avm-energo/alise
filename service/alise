#!/bin/bash

PIDNAME=/run/alise.pid
NameUnit="alise.service"

start()
{
        echo "ALiSe is starting"
        /usr/local/bin/alise & echo $! > $PIDNAME

        echo "Pid for ALiSe: $!"
        echo "ALiSe started successfully"
}

stop()
{
        echo "ALiSe is stopping"

        if ! kill $(<$PIDNAME) > /dev/null 2>&1; then
        echo "Process ALiSe doesn't not exist"
        fi

        echo "ALiSe stopped"
}

restart()
{
        stop
        start
}

dreload()
{
        echo "Daemon reload"
        systemctl daemon-reload
}

unit_enable()
{
        echo "Unit $NameUnit enable"
        systemctl enable $NameUnit
}

unit_disable()
{
        echo "Unit $NameUnit disable"
        systemctl disable $NameUnit
}

disk_usage()
{
        journalctl --disk-usage
}

show_log()
{
        journalctl -n $arg_command
}

show_log_realtime()
{
        journalctl -f
}

print_info_about_script()
{
        echo "Version script - [2.0.1]"

        echo "[-start]      -  Start app Sonica"
        echo "[-stop]       -  Stop app Sonica"
        echo "[-r]          -  Restart app Sonica"
        echo "[-dr]         -  Reload systemd to find new or changed units"
        echo "[-enable]     -  Remove the unit from startup when the system boots"
        echo "[-disable]    -  Enable the unit to start automatically when the system boots"
        echo "[-disk-usage] -  Determining the current volume of logs for journalctl"
        echo "[-l <n>]      -  Display the last <n> journalctl log messages"
	echo "[-lrt]        -  View logs journalctl in real time"
}

info()
{
        echo "--------------------Info-------------------------"
        echo "Pid file name        -  $PIDNAME"
        echo "Mono file location   -  $MONO"
        echo "Path to Core         -  $CORE"
        echo "Name unit in systemd -  $NameUnit"
        echo "-------------------------------------------------"
}

if [[ $# < 1 ]] ; then
        echo "Script ALiSe expects one of the parameters"
        print_info_about_script
        exit -1
fi

arguments=$1
arg_command=$2
case $arguments in
        start|-start) start break ;;
        stop|-stop) stop break ;;
        restart|-r)     restart break ;;
        dreload|-dr) dreload break ;;
        unit_enable|-enable) unit_enable break ;;
        unit_disable|-disable) unit_disable break ;;
        disk_usage|-disk-usage) disk_usage break ;;
        show_log|-l) show_log break ;;
        show_log_rt|-lrt) show_log_realtime break ;;
        info|-i) info break ;;
    *)
        echo "Command $1 not found"
        print_info_about_script
        break
        ;;
esac

